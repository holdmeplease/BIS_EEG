import numpy as np

from bis_lib import get_exp, get_eeg_time, csv2eeg

# 这些标注基于原始时间轴，在删除前几十s的data时，标注的idx也需要改变
# noise annotation
# 0526-1: 似乎有两个通道频谱相对很高，从时域上来看，有1-2Hz左右的震荡
# 146, 147,168,169,178,218,256,257,306,365,553, >=1099 体动时间约为455左右，暂时认为体动不一定影响EEG？
# 0526-2: 频谱未见异常，似乎是alpha频段比较高
# 269，860，861,1178,1179,1286,1287,1319(这5个只有EEG3出现了问题)
# 0526-3: 频谱显得很凌乱
# 130(EEG2)，2288，2289，2290，2291，2411(EEG3)，2412(EEG3),>=2520
# 0526-4: 频谱的下降趋势似乎很陡峭
# 252,257，1030<=x<=1530 (大量体动，似乎与event中吻合，但又有一点时间错位)
# 0526-5: 似乎有一个通道的频谱和其他通道不太一致
# 5,102,103,212<=x<=226，240<=x<=360，1196，1197，1198，1218，1219，1333，1334，1335，1336
# 0526-6: 频谱稍显凌乱，可能尾部大体动没有去除的时候，频谱就会显得凌乱
# 103，>=1705

# 0525-1: 似乎是alpha频段比较高
# 971(EEG1)，977(EEG1), 978(EEG1), 1090(EEG1),1108(EEG1),1109(EEG1),1147(EEG1),1166(EEG1),1167(EEG1),1286
# 1288~1292(EEG1),1306~1307(EEG1),1338~1343(EEG1),1388~1393(EEG1)
# 0525-2: 似乎是alpha频段比较高
# 152,123,1788~1793,>=1808

# 0524-1：频谱稍显凌乱，几个通道的能量似乎不在一个level
# 88，520～525，555，794，816～823，970～1000，>=1045
# 0524-2：频谱未见异常
# 77~81,94~96,130,748~749(EEG1),850~851(EEG3),921~925，937～938(EEG3), >=1036
# 0524-3: 也可以看到疑似alpha频带的抬升
# 327~349,387~389(EEG4),506(EEG1),1155,1156,>=1275
# 0524-4: 可以看到疑似alpha频带的抬升
# 1205

# 0523-1: 频谱稍显凌乱
# 164~165(EEG0),190，511，1358，1359，1368，>=1380
# 0523-2: 可以看到疑似alpha频带的抬升
# 1133~1134(EEG4)
# 0523-3: 有一个通道的频谱和其他明显不同, EEG4最好去掉
# 36，37，146～147(EEG4),335,336,455~470(EEG4),505~511(EEG4),545~551(EEG4)
# 630～633，761(EEG0), 890~1134(EEG4), 1033(EEG0), 1129~1134, 1425~1480(EEG4),1437
# >=1508(EEG4), 1532,1533,1544,1545
# 0523-4: 频谱不够整齐，但可以看到疑似alpha频带的抬升
# 435～464，501，516，517，556，1272～1276，1285，1286，1460～1490，1505，1535
# 1550，1553，1554，1818～1819(EEG2),1893~1894(EEG3),1956(EEG2)
# 0523-5: 频谱未见异常
# 219

# 0519-1: 频谱未见异常
# 454
# 0519-2: 频谱未见异常 (似乎在一开始观测到了burst suppression)
# 84
# 0519-3: 多个通道间频谱不是很重合
# 40~41(EEG4), 46~50,82,116~117(EEG4),125~126(EEG1),147~157(EEG1),235,236,315~345(EEG1&EEG4)
# 350~480,655~661,1615~1620,1793~1829,1880~1889
# 0519-4: 多个通道间频谱不是很重合 (2171之后的EEG4都有点不正常)
# 24,57~58,67~74,1501~1506,1526~1528,1917~1921,2171(EEG4),2187(EEG4),2193(EEG4),2199(EEG4)
# 2237~2238(EEG4)
# 0519-5: 频谱未见异常
# 0~29,2250~2255

# 0518-1: 频谱未见异常
# 0518-2: 有一个通道的低频表现似乎不一样
# 263~264(EEG3)，>=1015
# 0518-3：频谱未见异常，也没有看到alpha频段的抬升
# 59~62,438,762~764,>=1571
# 0518-4: 频谱未见异常
# 139，145，146

# 0517-1: 频谱未见异常，也没有看到alpha频段的抬升
# 686～687(EEG4),950~954,966~971,993~999,1061(EEG1)
# 0517-2: 频谱未见异常
# 173～174(EEG4),924,1262，1614～1617，2035～2039，2153
# 0517-3: 频谱未见异常
# 1282～1283
# 0517-4: 频谱稍显凌乱
# 1583～1585(EEG4)，1911～1914(EEG4), 1932(EEG2), 1945~1946(EEG2),2043~2044,2055,
# 2167~2172,2222~2223,>=2290
# 0517-5: 频谱稍显凌乱，这个EEG4莫名的凸起有点多
# 199～200, 793～794(EEG4), 836~837(EEG4), 844(EEG4), 851(EEG4), 857(EEG4),
# 928~931(EEG4), 978~979(EEG4), 1319~1321, 1486~1491, >=1586
# 0517-6: 频谱稍显凌乱
# 35~37(EEG2), >=2180

# 0516-1: 观察到有多个频带凸起
# 147，352(EEG2)，1985～1994，2017～2031，>=2050
# 0516-2: 频谱稍显凌乱
# 0~14,104,116~119,392~398,748~749,1165,1420~1437,1485~1529,1560~1700,2092(EEG4),>=3065
# 0516-3: 频谱未见异常
# 0516-4: 频谱未见异常
# 464~466,489~493,537~542

# 0428-1: 频谱未见异常，也没有看到alpha频段的抬升
# 344~355,405~455,495~540,562~582,595~615,640~659, 770~779, 815~829,906~913
# 0428-2: 有一个通道频谱和其他不同
# 1156～1166，1201，1202，1215～1225，>=1248
# 0428-3：有一个通道脱落 (EEG2删除)
# 98～179，797～801，937，>=1013
# 0428-4: 频谱未见异常
# >=1764

def get_noise_idx():
    noise_idx = {}
    noise_idx['0526_1'] = [146,147,168,169,178,218,256,257,306,365,553,1099,-1]
    noise_idx['0526_2'] = [269,860,861,1178+40000,1179+40000,1286+40000,1287+40000,1319+40000] # 最后5个仅限EEG3
    noise_idx['0526_3'] = [130+30000,2288,2289,2290,2291,2411+40000,2412+40000,2520,-1]
    noise_idx['0526_4'] = [252,257,1030,-1,1530]
    noise_idx['0526_5'] = [5,102,103,212,-1,226,240,-1,360,1196,1197,1198,1218,1219,1333,1334,1335,1336]
    noise_idx['0526_6'] = [103,1705,-1]
    noise_idx['0525_1'] = [971+20000,977+20000,978+20000,1090+20000,1108+20000,1109+20000,1147+20000,1166+20000,1167+20000,1286,1288+20000,-1,
                        1292+20000,1306+20000,-1,1307+20000,1338+20000,-1,1343+20000,1388+20000,-1,1393+20000]
    noise_idx['0525_2'] = [152,123,1788,-1,1793,1808,-1]
    noise_idx['0524_1'] = [88,520,-1,525,555,794,816,-1,823,970,-1,1000,1045,-1]
    noise_idx['0524_2'] = [77,-1,81,94,-1,96,130,748+20000,-1,749+20000,850+40000,-1,851+40000,921,-1,925,937+40000,-1,938+40000,1036,-1]
    noise_idx['0524_3'] = [327,-1,349,387+50000,-1,389+50000,506+20000,1155,1156,1275,-1]
    noise_idx['0524_4'] = [1205]
    noise_idx['0523_1'] = [164+10000,165+10000,190,511,1358,1359,1368,1380,-1]
    noise_idx['0523_2'] = [1133+50000,1134+50000]
    noise_idx['0523_3'] = [36,37,146+50000,147+50000,335,336,455+50000,-1,470+50000,505+50000,-1,511+50000,545+50000,-1,551+50000,
                        630,-1,633,761+10000,890+50000,-1,1134+50000,1033+10000,1129,-1,1134,1425+50000,-1,1480+50000,1437,
                        1508,-1] # 最后尾部本来只有EEG4不正常，但按照目前的协议不好编码，所有的通道都去掉了
    noise_idx['0523_4'] = [435,-1,464,501,516,517,556,1272,-1,1276,1285,1286,1460,-1,1490,1505,1535,1550,1553,1554,
                        1818+30000,1819+30000,1893+40000,1894+40000,1956+30000]
    noise_idx['0523_5'] = [219]

    noise_idx['0519_1'] = [454]
    noise_idx['0519_2'] = [84]
    noise_idx['0519_3'] = [40+50000,41+50000,46,-1,50,82,116+50000,117+50000,125+20000,126+20000,147+20000,-1,157+20000,235,236,315,-1,345,
                        350,-1,480,655,-1,661,1615,-1,1620,1793,-1,1829,1880,-1,1889]
    noise_idx['0519_4'] = [24,57,58,67,-1,74,1501,-1,1506,1526,-1,1528,1917,-1,1921,2171+50000,2187+50000,2193+50000,2199+50000,
                        2237+50000,2238+50000]
    noise_idx['0519_5'] = [0,-1,29,2250,-1,2255]

    noise_idx['0518_1'] = []
    noise_idx['0518_2'] = [263+40000,264+40000,1015,-1]
    noise_idx['0518_3'] = [59,-1,62,438,762,-1,764,1571,-1]
    noise_idx['0518_4'] = [139,145,146]

    noise_idx['0517_1'] = [686+50000,687+50000,950,-1,954,966,-1,971,993,-1,999,1061+20000]
    noise_idx['0517_2'] = [173+50000,174+50000,924,1262,1614,-1,1617,2035,-1,2039,2153]
    noise_idx['0517_3'] = [1282,1283]
    noise_idx['0517_4'] = [1583+50000,-1,1585+50000,1911+50000,-1,1914+50000,1932+30000,1945+30000,1946+30000,2043,2044,2055,
                        2167,-1,2172,2222,2223,2290,-1]
    noise_idx['0517_5'] = [199,200,793+50000,794+50000,836+50000,837+50000,844+50000,851+50000,857+50000,928+50000,-1,931+50000,
                        978+50000,979+50000,1319,-1,1321,1486,-1,1491,1586,-1]
    noise_idx['0517_6'] = [35+30000,-1,37+30000,2180,-1]

    noise_idx['0516_1'] = [147,352+30000,1985,-1,1994,2017,-1,2031,2050,-1]
    noise_idx['0516_2'] = [0,-1,14,104,116,-1,119,392,-1,398,748,749,1165,1420,-1,1437,1485,-1,1529,1560,-1,1700,2092+50000,3065,-1]
    noise_idx['0516_3'] = []
    noise_idx['0516_4'] = [464,-1,466,489,-1,493,537,-1,542]

    noise_idx['0428_1'] = [344,-1,355,405,-1,455,495,-1,540,562,-1,582,595,-1,615,640,-1,659,770,-1,779,815,-1,829,906,-1,913]
    noise_idx['0428_2'] = [1156,-1,1166,1201,1202,1215,-1,1225,1248,-1]
    noise_idx['0428_3'] = [98,-1,179,797,-1,801,937,1013,-1] # EEG 2需要删除
    noise_idx['0428_4'] = [1764,-1]

    fs = 1000
    noise_idx_all = {}

    exp_dates = ['0428', '0516', '0517', '0518', '0519', '0523', '0524', '0525', '0526']

    for i in range(len(exp_dates)):
        path_root = '/Users/zhangchao/Downloads/data_tmp/{}'.format(exp_dates[i])
        exp = get_exp(path_root, exp_dates[i])
        eeg_start_time, eeg_end_time = get_eeg_time(path_root, exp)
        for j in range(len(exp)):
            tmp = np.array(noise_idx['{}_{}'.format(exp_dates[i], j+1)])
            noise_idx_all['{}_{}'.format(exp_dates[i], j+1)] = []
            for k in range(tmp.shape[0]):
                if tmp[k] == -1:
                    if k==tmp.shape[0]-1:
                        eeg = csv2eeg(path_root, exp[j])
                        print('eeg.shape', eeg.shape)                  
                        for m in range(tmp[k-1]+1, eeg.shape[-1]//fs):
                            noise_idx_all['{}_{}'.format(exp_dates[i], j+1)].append(m)
                    else:
                        s = (tmp[k-1]+1) % 10000
                        e = tmp[k+1] % 10000
                        c = tmp[k-1] // 10000
                        for m in range(s, e, 1):
                            noise_idx_all['{}_{}'.format(exp_dates[i], j+1)].append(m+c*10000)
                else:
                    noise_idx_all['{}_{}'.format(exp_dates[i], j+1)].append(tmp[k])
            skip_second = (60 - int(eeg_start_time[j][-2:])) % 60
            tmp = np.array(noise_idx_all['{}_{}'.format(exp_dates[i], j+1)])
            del_idx = []
            for k in range(tmp.shape[0]):
                if (tmp[k] % 10000) < skip_second:
                    del_idx.append(k)
            tmp = np.delete(tmp, del_idx)
            noise_idx_all['{}_{}'.format(exp_dates[i], j+1)] = tmp - skip_second
            noise_idx_all['{}_{}'.format(exp_dates[i], j+1)] = noise_idx_all['{}_{}'.format(exp_dates[i], j+1)].tolist()

    return noise_idx_all

# pe, se, lzc等形如(seg_num, ch_num)的feature可以共用这一部分代码
def noise_handle(feature, seg_length, noise_idx):
    ave_num = 60 // seg_length
    feature_1m = np.zeros((feature.shape[0]//ave_num, feature.shape[1]))
    print('feature_1m.shape', feature_1m.shape)
    # 如果有单个通道有问题，将其PE替换为其他四个通道的平均值
    for i in range(len(noise_idx)):
        if noise_idx[i] > 10000:
            c = (noise_idx[i] // 10000) - 1
            clean_c = []
            for j in range(feature.shape[-1]):
                if j != c:
                    clean_c.append(j)
            feature_idx = (noise_idx[i] % 10000) // seg_length
            if feature_idx >= feature.shape[0]:
                continue
            print('feature_idx', feature_idx)
            print('feature[feature_idx, clean_c].shape', feature[feature_idx, clean_c].shape)
            feature[feature_idx, c] = np.mean(feature[feature_idx, clean_c])
    # 如果所有通道都有问题，在计算平均时忽略有问题的片段
    noise_idx_seg = []
    for i in range(len(noise_idx)):
        if noise_idx[i] < 10000:
            tmp = noise_idx[i] // seg_length
            if not tmp in noise_idx_seg:
                noise_idx_seg.append(tmp)
    for i in range(feature_1m.shape[0]):
        pre_ave = []
        for j in range(ave_num):
            if not i*ave_num+j in noise_idx_seg:
                pre_ave.append(feature[i*ave_num+j,:])
        pre_ave = np.array(pre_ave)
        print('feature_ave.shape', pre_ave.shape)
        if pre_ave.shape[0] == 0:
            if i==0:
                raise Exception('Error!! check the data!')
            else:
                feature_1m[i,:] = feature_1m[i-1,:]
        else:
            feature_1m[i,:] = np.mean(pre_ave, axis=0)
    print('feature_1m.shape', feature_1m.shape)
    return feature_1m

# 形如(f_num, seg_num)
def noise_handle_svd(feature, seg_length, noise_idx):
    ave_num = 60 // seg_length
    feature_1m = np.zeros((feature.shape[0], feature.shape[1]//ave_num))
    print('feature_1m.shape', feature_1m.shape)
    # 如果所有通道都有问题，在计算平均时忽略有问题的片段（单个通道有问题也忽略整个片段）
    noise_idx_seg = []
    for i in range(len(noise_idx)):
        tmp = (noise_idx[i] % 10000) // seg_length
        if not tmp in noise_idx_seg:
            noise_idx_seg.append(tmp)
    for i in range(feature_1m.shape[1]):
        pre_ave = []
        for j in range(ave_num):
            if not i*ave_num+j in noise_idx_seg:
                pre_ave.append(feature[:, i*ave_num+j])
        pre_ave = np.array(pre_ave)
        print('feature_ave.shape', pre_ave.shape)
        if pre_ave.shape[0] == 0:
            if i==0:
                raise Exception('Error!! check the data!')
            else:
                feature_1m[:,i] = feature_1m[:,i-1]
        else:
            feature_1m[:,i] = np.mean(pre_ave, axis=0)
    print('feature_1m.shape', feature_1m.shape)
    return feature_1m